name: Build and deploy client

on:
    push:
        branches: [ main ]
        paths:
          - 'src/Client/**'
    pull_request:
        branches: [ main ]
        paths:
          - 'src/Client/**'

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

env:  
  VERSION: 1.1.${{github.run_number}}.0

jobs:
    buildClient:
        runs-on: ${{ matrix.os }}
        strategy:
          fail-fast: false
          matrix:
            os: [windows-latest]
            #os: [windows-latest, macos-latest]

        steps:
            -   uses: actions/checkout@v4

            -   name: Set up .NET
                uses: actions/setup-dotnet@v3
                with:
                    dotnet-version: '8.x'

            -   name: Install workloads
                run: dotnet workload install maui

            -   name: Install Tizen
                run: |
                    Invoke-WebRequest 'https://raw.githubusercontent.com/Samsung/Tizen.NET/main/workload/scripts/workload-install.ps1' -OutFile 'workload-install.ps1'
                    .\workload-install.ps1

            -   uses: cschleiden/replace-tokens@v1
                env:
                    ANDROID_MAPS_KEY: ${{ secrets.ANDROID_MAPS_KEY }}
                    WINDOWS_MAPS_KEY: ${{ secrets.WINDOWS_MAPS_KEY }}
                    SYNCFUSION_KEY: ${{ secrets.SYNCFUSION_KEY }}
                with:
                    tokenPrefix: '#{'
                    tokenSuffix: '}#'
                    files: '["**/appsettings.json", "**/AndroidManifest.xml"]'

            -   name: Prepare build
                run: |
                    (Get-Content src\Client\Platforms\Windows\Package.appxmanifest).Replace('1.0.0.0', '${{ env.VERSION }}') | Set-Content src\Client\Platforms\Windows\Package.appxmanifest
                    (Get-Content src\Client\Client.csproj).Replace('<ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>', '<ApplicationDisplayVersion>${{ env.VERSION }}</ApplicationDisplayVersion>') | Set-Content src\Client\Client.csproj
                    (Get-Content src\Client\Client.csproj).Replace('<ApplicationVersion>1</ApplicationVersion>', '<ApplicationVersion>${{github.run_number}}</ApplicationVersion>') | Set-Content src\Client\Client.csproj

            -   name: Build Client
                run: |
                    dotnet publish src/Client/Client.csproj -f net8.0-android /p:Version="${{ env.VERSION }}"
                    dotnet publish src/Client/Client.csproj -f net8.0-tizen /p:Version="${{ env.VERSION }}"
                    mkdir output\android
                    mkdir output\tizen
                    copy ".\src\Client\bin\Release\net8.0-android\com.vladislavantonyuk.worldexplorer.aab" "output\android"
                    copy ".\src\Client\bin\Release\net8.0-tizen\tizen-x86\*.tpk" "output\tizen"

            -   name: Build Client (Apple)
                run: |
                    dotnet build src/Client/Client.csproj -f net8.0-ios /p:Version="${{ env.VERSION }}"
                    dotnet publish src/Client/Client.csproj -f net8.0-maccatalyst /p:Version="${{ env.VERSION }}"
                    mkdir output\maccatalyst
                    copy ".\src\Client\bin\Release\net8.0-maccatalyst\**\*.pkg" "output\maccatalyst"

            -   name: Build Client (Windows)
                run: |
                    dotnet publish src/Client/Client.csproj -f net8.0-windows10.0.19041.0 /p:Version="${{ env.VERSION }}"
                    copy ".\src\Client\obj\Release\net8.0-windows10.0.19041.0\win10-x64\resizetizer\f\*.*" ".\src\Client\bin\Release\net8.0-windows10.0.19041.0\win10-x64\"
                    copy ".\src\Client\obj\Release\net8.0-windows10.0.19041.0\win10-x64\resizetizer\r\*.*" ".\src\Client\bin\Release\net8.0-windows10.0.19041.0\win10-x64\"
                    copy ".\src\Client\obj\Release\net8.0-windows10.0.19041.0\win10-x64\resizetizer\sp\*.*" ".\src\Client\bin\Release\net8.0-windows10.0.19041.0\win10-x64\"
                    &"${Env:ProgramFiles(x86)}\Windows Kits\10\App Certification Kit\MakeAppx.exe" pack /v /h SHA256 /d "src\Client\bin\Release\net8.0-windows10.0.19041.0\win10-x64" /p "output\windows\WorldExplorer.msix";

            -   name: Upload artifact for deployment job
                uses: actions/upload-artifact@v3
                with:
                    name: client
                    path: output
                    retention-days: 7

    deployClient:
        runs-on: windows-latest
        needs: buildClient
        if: github.event_name != 'pull_request'
        environment:
            name: 'Production'

        steps:
            -   name: Download artifact from build job
                uses: actions/download-artifact@v3
                with:
                    name: client
                    path: "${{ github.workspace }}/client"

            # - name: Deploy Windows App to Microsoft Store
            #   uses: isaacrlevin/windows-store-action
            #   with:
            #     tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
            #     client-id: ${{ secrets.AZURE_AD_APPLICATION_CLIENT_ID }}
            #     client-secret: ${{ secrets.AZURE_AD_APPLICATION_SECRET }}
            #     app-id: ${{ secrets.STORE_APP_ID }}
            #     package-path: "${{ github.workspace }}/client/windows/WorldExplorer.msix"
