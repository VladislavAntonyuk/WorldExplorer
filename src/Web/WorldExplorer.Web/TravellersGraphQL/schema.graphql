schema {
  query: GetTravellersHandler
}

type GetTravellersHandler {
  travellers(skip: Int take: Int where: TravellerFilterInput order: [TravellerSortInput!]): TravellersCollectionSegment
}

input TravellerFilterInput {
  and: [TravellerFilterInput!]
  or: [TravellerFilterInput!]
  id: UuidOperationFilterInput
  routes: ListFilterInputTypeOfTravellerRouteFilterInput
}

input TravellerSortInput {
  id: SortEnumType
}

"A segment of a collection."
type TravellersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Traveller!]
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input ListFilterInputTypeOfTravellerRouteFilterInput {
  all: TravellerRouteFilterInput
  none: TravellerRouteFilterInput
  some: TravellerRouteFilterInput
  any: Boolean
}

enum SortEnumType {
  ASC
  DESC
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

type Traveller {
  id: UUID!
  routes: [TravellerRoute!]!
}

scalar UUID

input TravellerRouteFilterInput {
  and: [TravellerRouteFilterInput!]
  or: [TravellerRouteFilterInput!]
  id: UuidOperationFilterInput
  locations: ListFilterInputTypeOfLocationFilterInput
}

input ListFilterInputTypeOfLocationFilterInput {
  all: LocationFilterInput
  none: LocationFilterInput
  some: LocationFilterInput
  any: Boolean
}

input LocationFilterInput {
  and: [LocationFilterInput!]
  or: [LocationFilterInput!]
  latitude: FloatOperationFilterInput
  longitude: FloatOperationFilterInput
}

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

type TravellerRoute {
  id: UUID!
  locations: [Location!]!
}

type Location {
  latitude: Float!
  longitude: Float!
}

interface Error {
  message: String!
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION