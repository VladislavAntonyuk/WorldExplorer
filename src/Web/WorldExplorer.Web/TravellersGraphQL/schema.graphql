schema {
  query: Travellers
}

type Travellers {
  travellers(skip: Int take: Int where: TravellerFilterInput order: [TravellerSortInput!]): TravellersCollectionSegment
  byId(id: UUID!): Traveller
  visitsByTravellerId(skip: Int take: Int travellerId: UUID! where: VisitFilterInput order: [VisitSortInput!]): VisitsByTravellerIdCollectionSegment
  visitsByPlaceId(skip: Int take: Int placeId: UUID! where: VisitFilterInput order: [VisitSortInput!]): VisitsByPlaceIdCollectionSegment
}

input TravellerFilterInput {
  and: [TravellerFilterInput!]
  or: [TravellerFilterInput!]
  id: UuidOperationFilterInput
  visits: ListFilterInputTypeOfVisitFilterInput
}

input TravellerSortInput {
  id: SortEnumType
}

"A segment of a collection."
type TravellersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Traveller!]
}

input VisitFilterInput {
  and: [VisitFilterInput!]
  or: [VisitFilterInput!]
  id: UuidOperationFilterInput
  travellerId: UuidOperationFilterInput
  placeId: UuidOperationFilterInput
  visitDate: DateTimeOperationFilterInput
  review: ReviewFilterInput
}

input VisitSortInput {
  id: SortEnumType
  travellerId: SortEnumType
  placeId: SortEnumType
  visitDate: SortEnumType
  review: ReviewSortInput
}

"A segment of a collection."
type VisitsByTravellerIdCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Visit!]
}

"A segment of a collection."
type VisitsByPlaceIdCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Visit!]
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input ListFilterInputTypeOfVisitFilterInput {
  all: VisitFilterInput
  none: VisitFilterInput
  some: VisitFilterInput
  any: Boolean
}

enum SortEnumType {
  ASC
  DESC
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ReviewFilterInput {
  and: [ReviewFilterInput!]
  or: [ReviewFilterInput!]
  id: UuidOperationFilterInput
  rating: IntOperationFilterInput
  comment: StringOperationFilterInput
  visitId: UuidOperationFilterInput
}

input ReviewSortInput {
  id: SortEnumType
  rating: SortEnumType
  comment: SortEnumType
  visitId: SortEnumType
}

scalar UUID

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

type Visit {
  id: UUID!
  travellerId: UUID!
  placeId: UUID!
  visitDate: DateTime!
  review: Review
}

type Traveller {
  id: UUID!
  visits: [Visit!]!
}

type Review {
  id: UUID!
  rating: Int!
  comment: String
  visitId: UUID!
}

interface Error {
  message: String!
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION